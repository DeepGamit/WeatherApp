{"version":3,"sources":["actions/index.js","WeatherDay.js","SearchBar.js","WeatherHourly.js","App.js","serviceWorker.js","reducers/reducer_weather.js","reducers/reducer_forecast.js","reducers/rootReducer.js","index.js"],"names":["API_KEY","fetchWeather","city","units","WEATHER_URL","url","request","axios","get","console","log","type","payload","fetchForecast","FORECAST_URL","WeatherDay","props","state","isCelsius","celciusOnClick","bind","farenhiteOnClick","this","weather","length","e","setState","name","cityData","forecast","undefined","displayTemp","className","Math","round","main","temp","displayFeels","feels_like","key","id","onClick","alt","src","icon","height","width","description","temp_max","temp_min","map","data","renderForecast","cf","i","list","j","tempMin","tempMax","dt_txt","day","to","pathname","moment","format","date","renderWeather","Component","connect","dispatch","bindActionCreators","SearchBar","term","onFormSubmit","onInputChange","event","target","value","preventDefault","onSubmit","placeholder","onChange","WeatherHourly","dayForecast","celsius","handleClick","tConvert","celcius","location","history","push","time","toString","match","slice","res","inputDate","split","tempDay","checkDate","dayCards","faChevronLeft","style","fontSize","color","App","exact","path","component","Boolean","window","hostname","weatherReducer","action","concat","forecastReducer","rootReducer","combineReducers","WeatherReducer","ForecastReducer","store","applyMiddleware","ReduxPromise","createStore","reducers","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90d56ce8.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '60d72e12b8ec91d14b18d3a43004cdf2';\n\nexport const FETCH_WEATHER = 'FETCH_WEATHER';\nexport const FETCH_FORECAST = 'FETCH_FORECAST';\n\n// action creator\nexport const fetchWeather = (city,units) => {\n\n  const WEATHER_URL = `https://api.openweathermap.org/data/2.5/weather?appid=${API_KEY}`;\n  const url = `${WEATHER_URL}&units=${units}&q=${city}`;\n  const request = axios.get(url);\n  \n\n  // fetch (url).then(function(response){\n  //   return response.json()\n  // })\n  // .then(data => {\n  //   console.log(data)\n  // });\n\n  console.log('Request', request);\n\n  return {\n    type: FETCH_WEATHER,\n    payload: request\n  };\n}\n\nexport const fetchForecast = (city, units) => {\n\n  const FORECAST_URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`;\n  const url = `${FORECAST_URL}&units=${units}&q=${city}`;\n  const request = axios.get(url);\n\n  \n\n  console.log('Request', request);\n\n  return {\n    type: FETCH_FORECAST,\n    payload: request\n  };\n}\n\n\n","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport moment from 'moment'\nimport { Link } from 'react-router-dom'\nimport { fetchWeather } from './actions/index'\nimport { fetchForecast } from './actions/index'\n\n\nclass WeatherDay extends Component  {\n\n\n    constructor(props) {\n        super(props);\n        this.state = {isCelsius: true};\n        this.celciusOnClick = this.celciusOnClick.bind(this);\n        this.farenhiteOnClick = this.farenhiteOnClick.bind(this);\n      }\n\n      componentDidMount(){\n        \n        if(this.props.weather.length !== 0){\n            \n            if(this.state.isCelsius === true){\n                this.celciusOnClick();\n            } else {\n              this.farenhiteOnClick();\n            }\n\n        }\n         \n      }\n\n\n    celciusOnClick(e){\n\n        this.setState({\n            isCelsius: true\n        })\n\n        const city = this.props.weather[0].name\n        const units = \"metric\"\n        this.props.fetchWeather(city,units);\n        this.props.fetchForecast(city,units);\n\n    }\n\n    farenhiteOnClick(e){\n\n        this.setState({\n            isCelsius: false\n        })\n\n        const city = this.props.weather[0].name\n        const units = \"imperial\"\n        this.props.fetchWeather(city,units);\n        this.props.fetchForecast(city,units);\n\n    }\n\n    renderWeather(cityData, forecast){\n        \n        \n\n        if(cityData === undefined){\n            return(\n                <div>\n                    <h1>Enter a valid City Name</h1>\n                </div>\n            )\n        }\n        else {\n\n            var displayTemp = this.state.isCelsius ? <div className=\"temp\">{Math.round(cityData.main.temp)}&deg;<small>C</small><br/></div> :\n                                                     <div className=\"temp\">{Math.round(cityData.main.temp)}&deg;<small>F</small><br/></div>;\n\n            var displayFeels = this.state.isCelsius ? <div className=\"feels\">Feels like {Math.round(cityData.main.feels_like)}&deg;<small>C</small></div> :\n                                                      <div className=\"feels\">Feels like {Math.round(cityData.main.feels_like)}&deg;<small>F</small></div>\n\n            return(\n                    <div className=\"row\" key={cityData.id}>\n                            <div className=\"col-md-4 col-md-offset-4\">\n                                <div className=\"weather\">\n                                    <div className=\"current\">\n                                        \n                                        <div className=\"info\">\n                                            <div className=\"selection\">\n\n                                                <button type=\"button\" onClick={this.celciusOnClick}>&deg;<small>C</small></button> | <button type=\"button\" onClick={this.farenhiteOnClick}>&deg;<small>F</small></button>\n\n                                            </div>\n                                            \n                                            <div>&nbsp;</div>\n                                            <div className=\"city\">{cityData.name}</div>\n                                            <div className=\"icon\"><img alt=\"icon\" src={\"http://openweathermap.org/img/wn/\"+cityData.weather[0].icon+\"@2x.png\"}  height = \"90px\" width = \"90px\"/></div>\n                                            <div className=\"description\"> {cityData.weather[0].description}</div>\n                                            {displayTemp}\n                                            {displayFeels}\n                                            <div className=\"dayhl\"> &#8593;{Math.round(cityData.main.temp_max)}  &#8595;{Math.round(cityData.main.temp_min)}</div>\n                                            \n                                            <div></div>\n                                            <div key={cityData.name}>\n                                                {forecast.map(data => this.renderForecast(data, this.state.isCelsius))}\n                                            </div>\n                                        </div>\n                                    </div>\n                                </div>\n                            </div>\n                    </div>\n\n            )\n\n        }\n        \n       \n    };\n\n    \n    renderForecast(cityData,cf){\n        \n\n        \n\n        if(cityData === undefined){\n            return(\n                <div>\n                    <h1>Enter a valid City Name</h1>\n                </div>\n            )\n        }\n        else {\n\n            const forecast = [];\n            var i=0;\n            const data = cityData.list;\n            var j=0;\n            var tempMin = 100;\n            var tempMax = -100;\n\n            for(i=0;i<data.length;i++){\n\n                if(data[i].main.temp_min<tempMin)\n                    tempMin = data[i].main.temp_min;\n                if(data[i].main.temp_max>tempMax)\n                    tempMax = data[i].main.temp_max;\n                if(i===6 || i===14 || i===22 || i===30 || i===38)\n                {\n                    forecast[j]= {dt_txt: data[i].dt_txt, temp_min: tempMin, temp_max: tempMax, icon: data[i].weather[0].icon};\n                    j++;\n                    tempMin = 100;\n                    tempMax = -100;\n                }          \n            }\n\n\n            \n\n            return(\n                <div>\n                    {\n                        forecast.map(day => {\n                            return ( \n                                <div key={day.dt_txt}>\n                                <Link to={{ pathname: '/'+moment(day.dt_txt).format('dddd'), state:{date: day.dt_txt, isCelsius: cf}}}>\n                                    <div className=\"forecast\">\n                                    <div className=\"day\">{moment(day.dt_txt).format('dddd')}</div>\n                                    <div className=\"icon\"> <img alt=\"icon\" src={\"http://openweathermap.org/img/wn/\"+day.icon+\"@2x.png\"}  height = \"65px\" width = \"65x\"/></div>\n                                    <div className=\"highlow\"><span className=\"arrows\">&#8593;</span>{Math.round(day.temp_max)}  <span className=\"arrows\">&#8595;</span>{Math.round(day.temp_min)}</div>\n                                    \n                                    </div>\n                                </Link>\n                                </div>\n                            )\n                        })\n                    }\n                </div>\n            )\n\n        }\n\n       \n\n        }\n    \n    render(){\n        \n        \n        return(\n\n            <div>\n                {\n                    this.props.weather.map(data => this.renderWeather(data, this.props.forecast))\n                }\n            </div>\n        )\n\n\n    }\n    \n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return bindActionCreators({ fetchWeather, fetchForecast}, dispatch)\n  }\n  \n\nconst mapStatetoProps = (state) => {\n\n    return{\n        weather: state.weather,\n        forecast: state.forecast\n    }\n\n}\n\nexport default connect(mapStatetoProps,mapDispatchToProps)(WeatherDay)","import React, { Component } from 'react';\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux';\nimport { fetchWeather } from './actions/index'\nimport { fetchForecast } from './actions/index'\n\n\nclass SearchBar extends Component {\n \n    constructor(props) {\n        super(props);\n        this.state = { term: '' };\n        this.onFormSubmit = this.onFormSubmit.bind(this);\n        this.onInputChange = this.onInputChange.bind(this);\n      }\n\nonInputChange(event) {\nthis.setState({ term: event.target.value })\n}\n\n      \nonFormSubmit(event) {\n\n  const units = \"metric\"\n  event.preventDefault();\n  this.props.fetchWeather(this.state.term,units);\n  this.props.fetchForecast(this.state.term,units);\n\n}\n\n  render () {\n    return (\n\n\n        <div>\n\n            <form className=\"col s12\" onSubmit={this.onFormSubmit}>\n                  <div className=\"row\">\n                      <div className=\"input-field col s4 offset-s4\">\n                          <input  placeholder=\"Search City\" type=\"text\" className=\"validate\" value={this.state.term} onChange={this.onInputChange}/>\n                      </div>\n                  </div>\n              </form>\n           \n        </div>\n\n        \n            \n    )\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return bindActionCreators({ fetchWeather, fetchForecast }, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBar);","import React, {Component} from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\"\nimport { faChevronLeft } from '@fortawesome/free-solid-svg-icons'\n\n\n\nclass WeatherHourly extends Component  {\n\n    constructor(props) {\n        super(props);\n        this.state = { dayForecast: [],\n                        date: '' ,\n                        celsius: ''};\n        this.handleClick = this.handleClick.bind(this);\n        this.tConvert = this.tConvert.bind(this);\n      }\n\n    componentDidMount(){\n\n\n        console.log(this.state.celcius);\n        this.setState({\n            dayForecast: this.props.forecast,\n            date: this.props.location.state.date,\n            celsius: this.props.location.state.isCelsius\n        })\n\n\n\n    }\n\n    handleClick(e) {\n        this.props.history.push(\"/\");\n        // this.props.history.pushState(null, null, '/');\n       \n    }\n\n    tConvert(time){\n        // Check correct time format and split into components\n        time = time.toString ().match (/^([01]\\d|2[0-3])(:)([0-5]\\d)(:[0-5]\\d)?$/) || [time];\n\n        if (time.length > 1) { // If time format correct\n            time = time.slice (1);  // Remove full string match value\n            time[5] = +time[0] < 12 ? 'AM' : 'PM'; // Set AM/PM\n            time[0] = +time[0] % 12 || 12; // Adjust hours\n        }\n        return time[0]+\" \"+time[5]; // return adjusted time or original string\n    }\n\n\n    render(){\n\n        var day = this.state.dayForecast;\n        console.log(day);\n        var dayForecast = [];\n\n        \n        day.map(res => {\n           return dayForecast = res.list;\n            \n        });\n\n        console.log(dayForecast);\n        \n        var inputDate = this.state.date.split(' ');\n        var j=0;\n        var i=0;\n        const tempDay = [];\n\n    \n        for(i;i<dayForecast.length;i++){\n            let checkDate = dayForecast[i].dt_txt.split(' ');\n                if(inputDate[0] === checkDate[0])\n                    tempDay[j++] = dayForecast[i];\n        }\n\n        console.log(tempDay);\n\n        var displayTemp = '';\n        if( this.state.celsius){\n            console.log(\"Hi\");\n            displayTemp = <small>C</small>\n        }else {\n            \n            displayTemp =  <small>F</small>\n        }\n        console.log(displayTemp)\n        var displayFeels = this.state.celsius ? <small>C</small> : <small>F</small>;\n\n        const dayCards = tempDay.length ? (\n            tempDay.map(day=>{\n                return(\n                    <div className=\"col s12 m3\" key={day.dt_txt}>\n                        <div className=\"card medium\">\n                            <div className=\"card-content\">\n                                <h4>{this.tConvert(day.dt_txt.split(' ')[1])}</h4>\n                                <span className=\"card-title\">{day.weather[0].main}</span>\n                                <img alt=\"img\" src={\"http://openweathermap.org/img/wn/\"+day.weather[0].icon+\"@2x.png\"} />\n                                <h4><strong>{Math.round(day.main.temp)}&deg;</strong>{displayTemp}</h4>\n                                <h5>Feels like: {Math.round(day.main.feels_like)}&deg;{displayFeels}</h5>\n                            </div>\n                        </div>\n                    </div>\n                )\n            })\n        ):(\n             <div className=\"center\">No posts yet</div>\n        );\n        \n\n        return(\n            <div className=\"container\">\n                <button onClick={this.handleClick}>\n                <FontAwesomeIcon icon={faChevronLeft} style={\n                    {\n                        fontSize: \"50px\",\n                        color: \"black\"\n                    }\n                }/></button>\n                    <h4>{moment(this.props.location.state.date).format(\"dddd, MMMM Do YYYY\")}</h4>\n                    <div className=\"row\">\n                        {dayCards}\n                    </div>    \n            </div>\n        )\n    }\n\n\n\n}\n\nconst mapStatetoProps = (state) => {\n\n    return{\n        weather: state.weather,\n        forecast: state.forecast\n    }\n\n}\n\nexport default connect(mapStatetoProps)(WeatherHourly)","import React, { Component } from 'react';\nimport WeatherDay from './WeatherDay';\nimport SearchBar from './SearchBar';\nimport WeatherHourly from './WeatherHourly';\nimport { BrowserRouter, Route } from 'react-router-dom'\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <BrowserRouter>\n\n          <div className=\"App\">\n              <Route exact path=\"/\" component={SearchBar}/>\n              <Route exact path=\"/\" component={WeatherDay}/>\n              <Route exact path=\"/:day\" component={WeatherHourly}/>\n\n            </div>\n          \n      </BrowserRouter>\n        \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {FETCH_WEATHER} from '../actions/index'\n\n\nconst weatherReducer = (state = [], action) => {\n    \n    switch (action.type) {\n\n      case FETCH_WEATHER:\n        state = [];\n        return state.concat([action.payload.data]);  \n\n       default:\n        return state;\n\n  \n    }\n    \n  }\n\n  export default weatherReducer;","import {FETCH_FORECAST} from '../actions/index'\n\n\nconst forecastReducer = (state = [], action) => {\n\n    switch (action.type) {\n\n      case FETCH_FORECAST:\n        state = [];\n       return state.concat([action.payload.data]);\n\n       default:\n        return state;\n\n  \n    }\n    \n  }\n\n  export default forecastReducer","import { combineReducers } from 'redux';\nimport WeatherReducer from './reducer_weather';\nimport ForecastReducer from './reducer_forecast';\n\nconst rootReducer = combineReducers({\n  weather: WeatherReducer,\n  forecast: ForecastReducer\n});\n\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux';\nimport ReduxPromise from 'redux-promise';\nimport { Provider } from 'react-redux';\nimport reducers from './reducers/rootReducer'\n\nconst store = applyMiddleware(ReduxPromise)(createStore)(reducers);\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}